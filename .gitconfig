[alias]
    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph --abbrev-commit
    # View the current working tree status using the short format
    s = status -s
    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
    # Pull in remote changes for the current repository and all its submodules
    p = !"git pull; git submodule foreach git pull origin master"
    # Clone a repository including all submodules
    c = clone --recursive
    # Commit all changes
    ca = !git add -A && git commit -av
    # Switch to a branch, creating it if necessary
    go = checkout -B
    # Show verbose output about tags, branches or remotes
    tags = show-ref --tags
    branches = branch -vv -a
    remotes = remote -v
    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"
    # show last commit
    last = log -1
    # make given file in index look like it does in HEAD (i.e. unstage it)
    unstage = reset HEAD --
    unchange = checkout --
    ls = log --pretty=format:"%C(yellow)%h\\ %C(cyan)%ad%C(red\\ bold)%d\\ %Creset%s%C(blue\\ bold)\\ [%cn]"
    ll = log --pretty=format:"%C(yellow)%h\\ %C(cyan)%ad%C(red\\ bold)%d\\ %Creset%s%C(blue\\ bold)\\ [%cn]" --name-status
    # grep commits
    lgrep = log --all --grep
    # add tracking to current branch (e.g. git track origin/master)
    track = branch --set-upstream-to
    latest = !git stash -u && git checkout master && git tag $(date +%Y_%m_%d__%H_%M_%S) && git fetch origin && git reset --hard origin/master
    mc = merge --no-ff
    rrm = remote remove
    squash = reset --soft

[pull]
    rebase = preserve

[apply]
    # Detect whitespace errors when applying a patch
    #whitespace = fix

[core]
    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore_global
    # Treat spaces before tabs, lines that are indented with 8 or more spaces, and
    # all kinds of trailing whitespace as an error.
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of
    # a line
    #whitespace = space-before-tab,indent-with-non-tab,trailing-space
    editor = vim

[color]
    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
    ui = auto
[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true

# URL shorthands
[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
    insteadOf = "github:"
[url "git@gist.github.com:"]
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
    insteadOf = "gist:"

[push]
    default = matching

[commit]
  template = ~/.gitmessage

[include]
  path = ~/.gitconfig_extra
